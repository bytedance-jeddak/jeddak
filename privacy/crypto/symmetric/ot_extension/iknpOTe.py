# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _iknpOTe
else:
    import _iknpOTe

import builtins as __builtin__


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _iknpOTe.delete_SwigPyIterator

    def value(self):
        return _iknpOTe.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _iknpOTe.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _iknpOTe.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _iknpOTe.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _iknpOTe.SwigPyIterator_equal(self, x)

    def copy(self):
        return _iknpOTe.SwigPyIterator_copy(self)

    def next(self):
        return _iknpOTe.SwigPyIterator_next(self)

    def __next__(self):
        return _iknpOTe.SwigPyIterator___next__(self)

    def previous(self):
        return _iknpOTe.SwigPyIterator_previous(self)

    def advance(self, n):
        return _iknpOTe.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _iknpOTe.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _iknpOTe.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _iknpOTe.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _iknpOTe.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _iknpOTe.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _iknpOTe.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _iknpOTe:
_iknpOTe.SwigPyIterator_swigregister(SwigPyIterator)

class uncharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _iknpOTe.uncharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _iknpOTe.uncharVector___nonzero__(self)

    def __bool__(self):
        return _iknpOTe.uncharVector___bool__(self)

    def __len__(self):
        return _iknpOTe.uncharVector___len__(self)

    def __getslice__(self, i, j):
        return _iknpOTe.uncharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _iknpOTe.uncharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _iknpOTe.uncharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _iknpOTe.uncharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _iknpOTe.uncharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _iknpOTe.uncharVector___setitem__(self, *args)

    def pop(self):
        return _iknpOTe.uncharVector_pop(self)

    def append(self, x):
        return _iknpOTe.uncharVector_append(self, x)

    def empty(self):
        return _iknpOTe.uncharVector_empty(self)

    def size(self):
        return _iknpOTe.uncharVector_size(self)

    def swap(self, v):
        return _iknpOTe.uncharVector_swap(self, v)

    def begin(self):
        return _iknpOTe.uncharVector_begin(self)

    def end(self):
        return _iknpOTe.uncharVector_end(self)

    def rbegin(self):
        return _iknpOTe.uncharVector_rbegin(self)

    def rend(self):
        return _iknpOTe.uncharVector_rend(self)

    def clear(self):
        return _iknpOTe.uncharVector_clear(self)

    def get_allocator(self):
        return _iknpOTe.uncharVector_get_allocator(self)

    def pop_back(self):
        return _iknpOTe.uncharVector_pop_back(self)

    def erase(self, *args):
        return _iknpOTe.uncharVector_erase(self, *args)

    def __init__(self, *args):
        _iknpOTe.uncharVector_swiginit(self, _iknpOTe.new_uncharVector(*args))

    def push_back(self, x):
        return _iknpOTe.uncharVector_push_back(self, x)

    def front(self):
        return _iknpOTe.uncharVector_front(self)

    def back(self):
        return _iknpOTe.uncharVector_back(self)

    def assign(self, n, x):
        return _iknpOTe.uncharVector_assign(self, n, x)

    def resize(self, *args):
        return _iknpOTe.uncharVector_resize(self, *args)

    def insert(self, *args):
        return _iknpOTe.uncharVector_insert(self, *args)

    def reserve(self, n):
        return _iknpOTe.uncharVector_reserve(self, n)

    def capacity(self):
        return _iknpOTe.uncharVector_capacity(self)
    __swig_destroy__ = _iknpOTe.delete_uncharVector

# Register uncharVector in _iknpOTe:
_iknpOTe.uncharVector_swigregister(uncharVector)

class u64Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _iknpOTe.u64Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _iknpOTe.u64Vector___nonzero__(self)

    def __bool__(self):
        return _iknpOTe.u64Vector___bool__(self)

    def __len__(self):
        return _iknpOTe.u64Vector___len__(self)

    def __getslice__(self, i, j):
        return _iknpOTe.u64Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _iknpOTe.u64Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _iknpOTe.u64Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _iknpOTe.u64Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _iknpOTe.u64Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _iknpOTe.u64Vector___setitem__(self, *args)

    def pop(self):
        return _iknpOTe.u64Vector_pop(self)

    def append(self, x):
        return _iknpOTe.u64Vector_append(self, x)

    def empty(self):
        return _iknpOTe.u64Vector_empty(self)

    def size(self):
        return _iknpOTe.u64Vector_size(self)

    def swap(self, v):
        return _iknpOTe.u64Vector_swap(self, v)

    def begin(self):
        return _iknpOTe.u64Vector_begin(self)

    def end(self):
        return _iknpOTe.u64Vector_end(self)

    def rbegin(self):
        return _iknpOTe.u64Vector_rbegin(self)

    def rend(self):
        return _iknpOTe.u64Vector_rend(self)

    def clear(self):
        return _iknpOTe.u64Vector_clear(self)

    def get_allocator(self):
        return _iknpOTe.u64Vector_get_allocator(self)

    def pop_back(self):
        return _iknpOTe.u64Vector_pop_back(self)

    def erase(self, *args):
        return _iknpOTe.u64Vector_erase(self, *args)

    def __init__(self, *args):
        _iknpOTe.u64Vector_swiginit(self, _iknpOTe.new_u64Vector(*args))

    def push_back(self, x):
        return _iknpOTe.u64Vector_push_back(self, x)

    def front(self):
        return _iknpOTe.u64Vector_front(self)

    def back(self):
        return _iknpOTe.u64Vector_back(self)

    def assign(self, n, x):
        return _iknpOTe.u64Vector_assign(self, n, x)

    def resize(self, *args):
        return _iknpOTe.u64Vector_resize(self, *args)

    def insert(self, *args):
        return _iknpOTe.u64Vector_insert(self, *args)

    def reserve(self, n):
        return _iknpOTe.u64Vector_reserve(self, n)

    def capacity(self):
        return _iknpOTe.u64Vector_capacity(self)
    __swig_destroy__ = _iknpOTe.delete_u64Vector

# Register u64Vector in _iknpOTe:
_iknpOTe.u64Vector_swigregister(u64Vector)

IKNP_AES = _iknpOTe.IKNP_AES
IKNP_SHA = _iknpOTe.IKNP_SHA
class OTeReceiver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    compress_choices = property(_iknpOTe.OTeReceiver_compress_choices_get, _iknpOTe.OTeReceiver_compress_choices_set)
    ot_num = property(_iknpOTe.OTeReceiver_ot_num_get, _iknpOTe.OTeReceiver_ot_num_set)
    aes_key = property(_iknpOTe.OTeReceiver_aes_key_get, _iknpOTe.OTeReceiver_aes_key_set)

    def __init__(self, choices, ot_length, key=0):
        _iknpOTe.OTeReceiver_swiginit(self, _iknpOTe.new_OTeReceiver(choices, ot_length, key))

    def comp_trans_matrix_u(self, u_cols, t_rows, k0, k1):
        return _iknpOTe.OTeReceiver_comp_trans_matrix_u(self, u_cols, t_rows, k0, k1)

    def output(self, output, t_rows, y0, y1):
        return _iknpOTe.OTeReceiver_output(self, output, t_rows, y0, y1)
    __swig_destroy__ = _iknpOTe.delete_OTeReceiver

# Register OTeReceiver in _iknpOTe:
_iknpOTe.OTeReceiver_swigregister(OTeReceiver)


def compress_choices(compress_choices, choices, ot_num):
    return _iknpOTe.compress_choices(compress_choices, choices, ot_num)
class OTeSender(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x0 = property(_iknpOTe.OTeSender_x0_get, _iknpOTe.OTeSender_x0_set)
    x1 = property(_iknpOTe.OTeSender_x1_get, _iknpOTe.OTeSender_x1_set)
    ot_num = property(_iknpOTe.OTeSender_ot_num_get, _iknpOTe.OTeSender_ot_num_set)
    aes_key = property(_iknpOTe.OTeSender_aes_key_get, _iknpOTe.OTeSender_aes_key_set)

    def __init__(self, m0, m1, length, key=0):
        _iknpOTe.OTeSender_swiginit(self, _iknpOTe.new_OTeSender(m0, m1, length, key))

    def comp_y(self, y0, y1, s, k_s, u_cols):
        return _iknpOTe.OTeSender_comp_y(self, y0, y1, s, k_s, u_cols)
    __swig_destroy__ = _iknpOTe.delete_OTeSender

# Register OTeSender in _iknpOTe:
_iknpOTe.OTeSender_swigregister(OTeSender)


def sse_trans(inp, out, nrows, ncols):
    return _iknpOTe.sse_trans(inp, out, nrows, ncols)

def toBlock(*args):
    return _iknpOTe.toBlock(*args)

def initBlockArray(length):
    return _iknpOTe.initBlockArray(length)

def initBlock2DArray(length1, length2):
    return _iknpOTe.initBlock2DArray(length1, length2)

def get2DArrayRow(high, low, arr, row, length):
    return _iknpOTe.get2DArrayRow(high, low, arr, row, length)

def deleteBlockArray(arr):
    return _iknpOTe.deleteBlockArray(arr)

def deleteBlock2DArray(arr, length):
    return _iknpOTe.deleteBlock2DArray(arr, length)

def setBlockArray(*args):
    return _iknpOTe.setBlockArray(*args)

def getBlockArray(high, low, arr, length):
    return _iknpOTe.getBlockArray(high, low, arr, length)

def getNumpyArray(numpy_arr, vec):
    return _iknpOTe.getNumpyArray(numpy_arr, vec)

def fromBlock(block):
    return _iknpOTe.fromBlock(block)


