# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PSI
else:
    import _PSI

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PSI.delete_SwigPyIterator

    def value(self):
        return _PSI.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PSI.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PSI.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PSI.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PSI.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PSI.SwigPyIterator_copy(self)

    def next(self):
        return _PSI.SwigPyIterator_next(self)

    def __next__(self):
        return _PSI.SwigPyIterator___next__(self)

    def previous(self):
        return _PSI.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PSI.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PSI.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PSI.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PSI.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PSI.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PSI.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PSI.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PSI:
_PSI.SwigPyIterator_swigregister(SwigPyIterator)

class uncharVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PSI.uncharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PSI.uncharVector___nonzero__(self)

    def __bool__(self):
        return _PSI.uncharVector___bool__(self)

    def __len__(self):
        return _PSI.uncharVector___len__(self)

    def __getslice__(self, i, j):
        return _PSI.uncharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PSI.uncharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PSI.uncharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PSI.uncharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PSI.uncharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PSI.uncharVector___setitem__(self, *args)

    def pop(self):
        return _PSI.uncharVector_pop(self)

    def append(self, x):
        return _PSI.uncharVector_append(self, x)

    def empty(self):
        return _PSI.uncharVector_empty(self)

    def size(self):
        return _PSI.uncharVector_size(self)

    def swap(self, v):
        return _PSI.uncharVector_swap(self, v)

    def begin(self):
        return _PSI.uncharVector_begin(self)

    def end(self):
        return _PSI.uncharVector_end(self)

    def rbegin(self):
        return _PSI.uncharVector_rbegin(self)

    def rend(self):
        return _PSI.uncharVector_rend(self)

    def clear(self):
        return _PSI.uncharVector_clear(self)

    def get_allocator(self):
        return _PSI.uncharVector_get_allocator(self)

    def pop_back(self):
        return _PSI.uncharVector_pop_back(self)

    def erase(self, *args):
        return _PSI.uncharVector_erase(self, *args)

    def __init__(self, *args):
        _PSI.uncharVector_swiginit(self, _PSI.new_uncharVector(*args))

    def push_back(self, x):
        return _PSI.uncharVector_push_back(self, x)

    def front(self):
        return _PSI.uncharVector_front(self)

    def back(self):
        return _PSI.uncharVector_back(self)

    def assign(self, n, x):
        return _PSI.uncharVector_assign(self, n, x)

    def resize(self, *args):
        return _PSI.uncharVector_resize(self, *args)

    def insert(self, *args):
        return _PSI.uncharVector_insert(self, *args)

    def reserve(self, n):
        return _PSI.uncharVector_reserve(self, n)

    def capacity(self):
        return _PSI.uncharVector_capacity(self)
    __swig_destroy__ = _PSI.delete_uncharVector

# Register uncharVector in _PSI:
_PSI.uncharVector_swigregister(uncharVector)

class dataArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _PSI.dataArray_swiginit(self, _PSI.new_dataArray(nelements))
    __swig_destroy__ = _PSI.delete_dataArray

    def __getitem__(self, index):
        return _PSI.dataArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _PSI.dataArray___setitem__(self, index, value)

    def cast(self):
        return _PSI.dataArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _PSI.dataArray_frompointer(t)

# Register dataArray in _PSI:
_PSI.dataArray_swigregister(dataArray)

def dataArray_frompointer(t):
    return _PSI.dataArray_frompointer(t)

class uncharArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _PSI.uncharArray_swiginit(self, _PSI.new_uncharArray(nelements))
    __swig_destroy__ = _PSI.delete_uncharArray

    def __getitem__(self, index):
        return _PSI.uncharArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _PSI.uncharArray___setitem__(self, index, value)

    def cast(self):
        return _PSI.uncharArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _PSI.uncharArray_frompointer(t)

# Register uncharArray in _PSI:
_PSI.uncharArray_swigregister(uncharArray)

def uncharArray_frompointer(t):
    return _PSI.uncharArray_frompointer(t)

class u64Array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _PSI.u64Array_swiginit(self, _PSI.new_u64Array(nelements))
    __swig_destroy__ = _PSI.delete_u64Array

    def __getitem__(self, index):
        return _PSI.u64Array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _PSI.u64Array___setitem__(self, index, value)

    def cast(self):
        return _PSI.u64Array_cast(self)

    @staticmethod
    def frompointer(t):
        return _PSI.u64Array_frompointer(t)

# Register u64Array in _PSI:
_PSI.u64Array_swigregister(u64Array)

def u64Array_frompointer(t):
    return _PSI.u64Array_frompointer(t)

class DATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    d = property(_PSI.DATA_d_get, _PSI.DATA_d_set)

    def __init__(self):
        _PSI.DATA_swiginit(self, _PSI.new_DATA())
    __swig_destroy__ = _PSI.delete_DATA

# Register DATA in _PSI:
_PSI.DATA_swigregister(DATA)

class PARAMETERS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    width = property(_PSI.PARAMETERS_width_get, _PSI.PARAMETERS_width_set)
    logHeight = property(_PSI.PARAMETERS_logHeight_get, _PSI.PARAMETERS_logHeight_set)
    senderSize = property(_PSI.PARAMETERS_senderSize_get, _PSI.PARAMETERS_senderSize_set)
    receiverSize = property(_PSI.PARAMETERS_receiverSize_get, _PSI.PARAMETERS_receiverSize_set)
    h1LengthInBytes = property(_PSI.PARAMETERS_h1LengthInBytes_get, _PSI.PARAMETERS_h1LengthInBytes_set)
    hashLengthInBytes = property(_PSI.PARAMETERS_hashLengthInBytes_get, _PSI.PARAMETERS_hashLengthInBytes_set)

    def __init__(self):
        _PSI.PARAMETERS_swiginit(self, _PSI.new_PARAMETERS())
    __swig_destroy__ = _PSI.delete_PARAMETERS

# Register PARAMETERS in _PSI:
_PSI.PARAMETERS_swigregister(PARAMETERS)

class PsiSender(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PSI.PsiSender_swiginit(self, _PSI.new_PsiSender())

    def senderInit(self, seed, senderSet, pp, transLocations):
        return _PSI.PsiSender_senderInit(self, seed, senderSet, pp, transLocations)

    def senderOutput(self, seed, transLocations, otMessages, choices, matrixDelta, pp, hashOutputs):
        return _PSI.PsiSender_senderOutput(self, seed, transLocations, otMessages, choices, matrixDelta, pp, hashOutputs)
    __swig_destroy__ = _PSI.delete_PsiSender

# Register PsiSender in _PSI:
_PSI.PsiSender_swigregister(PsiSender)


def senderEvaluateLocationElement(seed, pp, receiverData, locationElement):
    return _PSI.senderEvaluateLocationElement(seed, pp, receiverData, locationElement)

def senderEvalMatrxCElement(pp, otMessage, choice, matrixDelta_element, matrixC_element):
    return _PSI.senderEvalMatrxCElement(pp, otMessage, choice, matrixDelta_element, matrixC_element)

def senderOutputElement(pp, locationElement, matrixC, hashOutput):
    return _PSI.senderOutputElement(pp, locationElement, matrixC, hashOutput)

def senderOutputs(pp, locations, matrixC, hashOutputs):
    return _PSI.senderOutputs(pp, locations, matrixC, hashOutputs)
class PsiReceiver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PSI.PsiReceiver_swiginit(self, _PSI.new_PsiReceiver())

    def receiverInit(self, seed, receiverSet, pp, transLocations, matrixD):
        return _PSI.PsiReceiver_receiverInit(self, seed, receiverSet, pp, transLocations, matrixD)

    def receiverEvalDelta(self, otMessages, pp, matrixD, matrixA, matrixDelta):
        return _PSI.PsiReceiver_receiverEvalDelta(self, otMessages, pp, matrixD, matrixA, matrixDelta)

    def receiverOutput(self, pp, transLocations, matrixA, senderOutputs, senderSize, psiResIdx):
        return _PSI.PsiReceiver_receiverOutput(self, pp, transLocations, matrixA, senderOutputs, senderSize, psiResIdx)
    __swig_destroy__ = _PSI.delete_PsiReceiver

# Register PsiReceiver in _PSI:
_PSI.PsiReceiver_swigregister(PsiReceiver)


def evaluateMatrixD(width, receiverSize, logHeight, widthBucket1, locationInBytes, heightInBytes, transLocations, matrixD):
    return _PSI.evaluateMatrixD(width, receiverSize, logHeight, widthBucket1, locationInBytes, heightInBytes, transLocations, matrixD)

def receiverEvaluateLocationElement(seed, pp, receiverData, locationElement):
    return _PSI.receiverEvaluateLocationElement(seed, pp, receiverData, locationElement)

def receiverEvalMatrxD(pp, transLocations, matrixD):
    return _PSI.receiverEvalMatrxD(pp, transLocations, matrixD)

def receiverEvalDeltaElement(otMessage1, otMessage2, pp, matrixD_element, matrixA_element, matrixDelta_element):
    return _PSI.receiverEvalDeltaElement(otMessage1, otMessage2, pp, matrixD_element, matrixA_element, matrixDelta_element)

def receiverGetHashInputBit(pp, locationElement_row, matrixA_row):
    return _PSI.receiverGetHashInputBit(pp, locationElement_row, matrixA_row)

def receiverHashOutput(pp, hashInputWidth, hashOutput):
    return _PSI.receiverHashOutput(pp, hashInputWidth, hashOutput)

def receiverOutputElement(pp, locationElement, matrixA, hashOutput):
    return _PSI.receiverOutputElement(pp, locationElement, matrixA, hashOutput)

def receiverOutputs(pp, locations, matrixA, hashOutputs):
    return _PSI.receiverOutputs(pp, locations, matrixA, hashOutputs)

def toBlock(*args):
    return _PSI.toBlock(*args)

def fromBlock(block):
    return _PSI.fromBlock(block)

def fromU64(u):
    return _PSI.fromU64(u)

def toU64(*args):
    return _PSI.toU64(*args)

def fromVectorU8(data):
    return _PSI.fromVectorU8(data)

def paddingToBlock(data):
    return _PSI.paddingToBlock(data)

def block_to_data(blk):
    return _PSI.block_to_data(blk)

def data_to_block(data):
    return _PSI.data_to_block(data)

def setDataArray(arr, dataLow, dataHigh, size):
    return _PSI.setDataArray(arr, dataLow, dataHigh, size)

def setData(*args):
    return _PSI.setData(*args)

def gen2DArray(npyLength1D, npyLength2D):
    return _PSI.gen2DArray(npyLength1D, npyLength2D)

def del2DArray(arr, npyLength1D):
    return _PSI.del2DArray(arr, npyLength1D)

def get2DArrayRow(row, arr, x):
    return _PSI.get2DArrayRow(row, arr, x)

def get2DArrayElement(*args):
    return _PSI.get2DArrayElement(*args)

def set2DArrayElement(*args):
    return _PSI.set2DArrayElement(*args)

def set2DArrayRow(arr, x, row):
    return _PSI.set2DArrayRow(arr, x, row)

def getDataValueLow(data):
    return _PSI.getDataValueLow(data)

def getDataValue(data):
    return _PSI.getDataValue(data)

def combineOtMessages(otMessages1, otMessages2, len):
    return _PSI.combineOtMessages(otMessages1, otMessages2, len)

def mallocArray(arr, n1, n2):
    return _PSI.mallocArray(arr, n1, n2)

def freeArray(arr, n1):
    return _PSI.freeArray(arr, n1)

def shortHash(data, hashOutput, lengthInBytes):
    return _PSI.shortHash(data, hashOutput, lengthInBytes)


